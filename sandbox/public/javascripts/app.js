// Generated by CoffeeScript 1.6.3
(function() {
  var Canvas, Screen, app, c, cancelAnimationFrame, cmd, draw, requestAnimFrame, requestID;

  app = angular.module("canvasApp", ["ngCookies", "ngResource", "ngSanitize", "ngRoute"]);

  Screen = (function() {
    function Screen(width, height) {
      this.width = width;
      this.height = height;
    }

    Screen.prototype.test = function() {
      console.log(this.width);
      return console.log(this.height);
    };

    return Screen;

  })();

  Canvas = (function() {
    function Canvas() {
      this.canvas = null;
      this.ctx = null;
      this.w = null;
      this.h = null;
      this.screen = null;
    }

    Canvas.prototype.create_canvas = function() {
      var cbrdr, coffs, cpad, ct, ctext, cwidth;
      ct = "Your browser does not support &lt;canvas&gt;, " + "try one of <a href='#'>these</a> instead.";
      this.canvas = document.createElement("canvas");
      ctext = document.createTextNode(ct);
      document.getElementById("spawn-canvas").appendChild(this.canvas).appendChild(ctext);
      cpad = window.getComputedStyle(this.canvas, null).getPropertyValue("padding");
      cbrdr = window.getComputedStyle(this.canvas, null).getPropertyValue("border-width");
      coffs = parseInt(cpad) * 2 + parseInt(cbrdr) * 2;
      cwidth = document.getElementsByClassName("main-content")[0].offsetWidth - coffs;
      this.w = this.canvas.width = cwidth;
      this.h = this.canvas.height = this.canvas.width / 16 * 9;
      return this.ctx = this.canvas.getContext("2d");
    };

    Canvas.prototype.block = function(color, coords, s) {
      this.canvas.getContext("2d").fillStyle = color;
      return this.canvas.getContext("2d").fillRect(coords[0] * s, coords[1] * s, s, s);
    };

    Canvas.prototype.pixel = function(color, coords) {
      return block(color, coords, 1);
    };

    Canvas.prototype.spawn = function() {
      var height, width;
      console.log("Spawned!");
      height = Math.floor(this.canvas.height);
      width = Math.floor(this.canvas.width);
      return this.screen = new Screen(width, height);
    };

    return Canvas;

  })();

  requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;

  cancelAnimationFrame = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame;

  c = new Canvas;

  requestID = null;

  draw = function() {
    this.ctx.clearRect(0, 0, w, h);
    this.ctx.fillStyle = "#000";
    this.ctx.fillRect(0, 0, w, h);
    return requestID = requestAnimFrame(draw);
  };

  cmd = document.getElementById("cmd");

  document.onkeydown = function(e) {
    var keyCode;
    if (!e) {
      e = window.event;
    }
    if (e.target !== cmd) {
      keyCode = e.keyCode ? e.keyCode : e.which;
      if (keyCode === 27) {
        return cmd.focus();
      }
    }
  };

  cmd.onkeypress = function(e) {
    var command, exists;
    if (!e) {
      e = window.event;
    }
    if (e.keyCode === 13 || e.which === 13) {
      command = cmd.value.toLowerCase();
      exists = document.getElementsByTagName("canvas")[0] !== void 0;
      cmd.value = "";
      switch (command) {
        case "start":
          if (exists) {
            return requestID = requestAnimationFrame(draw);
          }
          break;
        case "stop":
          if (exists) {
            return cancelAnimationFrame(requestID);
          }
          break;
        case "clear":
          if (exists) {
            cancelAnimationFrame(requestID);
            return c.ctx.clearRect(0, 0, w, h);
          }
          break;
        case "create":
          if (!exists) {
            c.create_canvas();
            return c.spawn();
          }
          break;
        case "remove":
          if (exists) {
            return c.canvas.parentNode.removeChild(canvas);
          }
          break;
        default:
          return console.log("Invalid command");
      }
    }
  };

}).call(this);
